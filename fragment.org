#+latex_class: cn-article
#+title: Android Fragments
#+author: deepwaterooo

* 关于Fragment的onResume() 以及可见状态的判断
- Fragment中有onResume()和onPause()方法，一般来说这两个方法是跟Activity绑定的，即触发Activity的这两个方法时就会触发Fragment的这两个方法，另外Fragment还有可见与不可见状态，但是Fragment中的onResume()/onPause()和可见/不可见完全是两码事。这里我将这两种情况做了一下分析，以做记录。
** onResume()和onPause()
- 这两个方法会跟随Activity而变化，但是也不一定只有经历Activity的生命周期才会触发，这又分两种情况：
- 1. 在Activity中单独使用Fragment
  - 单独使用Fragment的情况下，除了会跟随Activity的onResume和onPause的情况外，在当前Activity中添加一个Fragment时，被添加的Fragment都会调用onResume，这包括通过add和replace的方式添加；在Fragment销毁的情况下都会触发onPause，如果是add到回退栈的情况，back键就会触发onPause，如果是replace的情况，则被替换掉的Fragment会触发onPause。
  - 如果Activity中添加了多个Fragment，那么当Activity触发onResume和onPause时，Activity中的每一个Fragment都会触发这两个方法，即便这个Fragment不在最顶层。
- 2. 在ViewPager中使用Fragment
  - 在ViewPager中使用Fragment时这两个方法就更加奇妙了，因为你看不见的Fragment也会触发onResume和onPause，这时跟ViewPager预加载相关，默认情况下，ViewPager左右会预加载1页，所以如果ViewPager中有四个Fragment A、B、C、D，当你展示A Fragment的时候，A和B两个Fragment都会触发onResume，当你切换到B，则C Fragment触发onResume，当你再切换到C，则A Fragment会触发onPause(这时A已经销毁了)，然后D Fragment会触发onResume，再回来的时候也是这样，如此反复。
  - 即被ViewPager预加载的Fragment全部会调用onResume，被ViewPager销毁的Fragment全部会调用onPause。
  - 当ViewPager所在的Activity触发onResume和onPause时，ViewPager中所有已创建的Fragment都会触发这两个方法（即包括ViewPager预加载的Fragment），比如假如你当前处于B Fragment, 当你按下Home键时，A B C三个Fragment都会触发onPause，当你再返回来的时候，A B C三个Fragment都会触发onResume。
** Visible和Hidden
- Fragment 中有两个方法isHidden()和isVisible()，注释说是可以用来判断其可见性，但是经过测试如果你是在Fragment的onResume/onPause方法中调用这两个方法判断是不准确的，onResume的方法中isVisible()有可能为false, 而onPause的方法中isVisible()也有可能为true。可见性需要通过下面两个方法做判断：
#+BEGIN_SRC csharp
@Override
public void onHiddenChanged(boolean hidden) {
    super.onHiddenChanged(hidden);
}
@Override
public void setUserVisibleHint(boolean isVisibleToUser) {
    super.setUserVisibleHint(isVisibleToUser);
}
#+END_SRC 
- 这也分两种情况，onHiddenChanged是在单独使用Fragment的时候进行show/hide操作时使用，setUserVisibleHint是在ViewPager中使用时判断。
- 1. 单独使用Fragment的情况
  - 单独使用Fragment的情况比较简单，就是对Fragment进行show和hide的时候会回调onHiddenChanged方法。除此之外的操作，如add/replace/remove都不会触发这个方法。
- 2. 在ViewPager中使用Fragment的情况
  - 在ViewPager中使用Fragment时，同样跟ViewPager的预加载有关，假如我们有A B C D四个Fragment，初次打开默认是A Fragment，这时会调用A和B的setUserVisibleHint方法设置参数值为false, 紧接着它会再调用一次A的setUserVisibleHint方法设置参数值为true。当切换到B时，则会调用C和A的setUserVisibleHint方法参设置数值为false，当切换到C时，则会调用D和B的setUserVisibleHint方法设置参数值为false，当再次返回B时，则会调用A和C的setUserVisibleHint方法设置参数值为false。
  - 即被ViewPager预加载的Fragment全部会调用setUserVisibleHint方法设置参数值为false，只有当前展示的那一页则会调用setUserVisibleHint方法设置参数值为true。另外值得注意的一点是setUserVisibleHint这个方法的调用时机很早，会在Fragment的onAttach()、onCreate()等方法之前调用，所以，如果你在这里用到了全局变量一定要判断是否初始化了。
** 总结
- 以上是经过测试分析的结果，看了一些博客，有些人喜欢将onResume和可见状态联合起来做Fragment的可见性的判断，这个是非常麻烦并且十分不靠谱的，因为在Fragment的onResume/onPause的时候它的可见状态是完全不确定的。因此不能把onResume/onPause和visible/hidden状态混为一谈，要分开对待，因为这两种有可能会交叉发生。

* 其它一些零零碎碎的补充
- 当碎片第一次被加载到屏幕上时，会依次执行onAttach（），onCreate（），onCreateView（），onActivityCreated（），onStart（）和onResume（）方法。
- 当点击按钮切换到下一张图片时，第二张将第一张图片覆盖掉，此时用户看不到第一张图片，第一个碎片进入了停止状态。因此onPause（），onStop（）和onDestroyView（）方法会得到执行。当然如果在替换的时候没有调用addTobackStack（）方法，此时第一个碎片就会进入销毁状态，onDestroy（）和onDetach（）方法就会得到执行。
- 接着按下Back键，第一个图片就会重新回到屏幕，由于第一个碎片重新回到了运行状态，因此onCreateView（），onActivityCreated（），onSart（）和onResume（）方法会得到执行。注意此时onCreate（）方法不会执行，因为我们借助了addToBackStack（）方法使得第一个碎片并没有被销毁。
- 再次按下Back键后，依次会执行onPause（），onStop（），onDestroyView（）onDestroy（）和onDetach（）方法，最终将碎片销毁掉。
- 另外值得一提的是，在碎片中你也是可以通过onSaveInstanceState（）方法来保存数据的，因为进入停止状态的碎片有可能在系统内存不足的时候被回收。保存下来的数据在onCreate（），onCreateView（）和onActivityCreated（）这3个方法中都可以重新得到，他们都含有一个Bundle类型的savedInstanceState参数。

* AndroidX下你得知道的Activity和Fragment的变化: 可能还稍微有点作显得假大空而缺少实际体会
** 在构造器中传入布局 ID
- 从 AndroidX  AppCompat 1.1.0 和 Fragment 1.1.0 ( 译者注：AppCompat 包含 Fragment，且 Fragment 包含 Activity，详情见【整理】Jetpack 主要组件的依赖及传递关系 )开始，您可以使用将 layoutId 作为参数的构造函数：
- class MyActivity : AppCompatActivity(R.layout.my_activity)class MyFragmentActivity: FragmentActivity(R.layout.my_fragment_activity)class MyFragment : Fragment(R.layout.my_fragment)
- 这种方法可以减少 Activity/Fragment 中方法重写的数量，并使类更具可读性。无需在 Activity 中重写 onCreate() 即可调用 setContentView() 方法。另外，无需手动在Fragment 中重写 onCreateView 即可手动调用 Inflater 来扩展视图。
** 扩展 Activity/Fragment 的灵活性
- 借助 AndroidX 新的 API ，可以减少在 Activity/Fragment 处理某些功能的情况。通常，您可以获取提供某些功能的对象并向其注册您的处理逻辑，而不是重写 Activity / Fragment 中的方法。这样，您现在可以在屏幕上组成几个独立的类，获得更高的灵活性，复用代码，并且通常在不引入自己的抽象的情况下，对代码结构具有更多控制。让我们看看这在两个示例中如何工作。
*** 1. OnBackPressedDispatcher
- 有时，您需要阻止用户返回上一级。在这种情况下，您需要在 Activity 中重写 onBackPressed() 方法。但是，当您使用 Fragment 时，没有直接的方法来拦截返回。在 Fragment 类中没有可用的 onBackPressed() 方法，这是为了防止同时存在多个 Fragment 时发生意外行为。
- 但是，从 AndroidX Activity 1.0.0 开始，您可以使用 OnBackPressedDispatcher 在您可以访问该 Activity 的代码的任何位置（例如，在 Fragment 中）注册 OnBackPressedCallback。
#+BEGIN_SRC kotlin
class MyFragment : Fragment() {
    override fun onAttach(context: Context) {
        super.onAttach(context)
        val callback = object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                // Do something
            }
        }
        requireActivity().onBackPressedDispatcher.addCallback(this, callback)
    }
}
#+END_SRC
- 您可能会在这里注意到另外两个有用的功能：
- OnBackPressedCallback 的构造函数中的布尔类型的参数有助于根据当前状态动态 打开/关闭按下的行为
- addCallback() 方法的可选第一个参数是 LifecycleOwner，以确保仅在您的生命周期感知对象（例如，Fragment）至少处于 STARTED 状态时才使用回调。
- 通过使用 OnBackPressedDispatcher ，您不仅可以获得在 Activity 之外处理返回键的便捷方式。根据您的需要，您可以在任意位置定义 OnBackPressedCallback，使其可复用，或根据应用程序的架构进行任何操作。您不再需要重写Activity 中的 onBackPressed 方法，也不必提供自己的抽象的来实现需求的代码。
*** 2. SavedStateRegistry
- 如果您希望 Activity 在终止并重启后恢复之前的状态，则可能要使用 saved state 功能。过去，您需要在 Activity 中重写两个方法：onSaveInstanceState 和 onRestoreInstanceState。您还可以在 onCreate 方法中访问恢复的状态。同样，在 Fragment 中，您可以使用onSaveInstanceState 方法（并且可以在 onCreate，onCreateView 和onActivityCreated方法中恢复状态）。
- 从 AndroidX SavedState1.0.0（它是 AndroidX Activity 和 AndroidX  Fragment 内部的依赖。译者注：您不需要单独声明它）开始，您可以访问 SavedStateRegistry，它使用了与前面描述的 OnBackPressedDispatcher 类似的机制：您可以从 Activity / Fragment 中获取 SavedStateRegistry，然后 注册您的 SavedStateProvider：
#+BEGIN_SRC kotlin
class MyActivity : AppCompatActivity() {
    companion object {
        private const val MY_SAVED_STATE_KEY = "my_saved_state"
        private const val SOME_VALUE_KEY = "some_value"
    }
    private lateinit var someValue: String
    private val savedStateProvider = SavedStateRegistry.SavedStateProvider {
        Bundle().apply {
            putString(SOME_VALUE_KEY, someValue)
        }
    }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        savedStateRegistry
            .registerSavedStateProvider(MY_SAVED_STATE_KEY, savedStateProvider)
    }
    fun someMethod() {
        someValue = savedStateRegistry
            .consumeRestoredStateForKey(MY_SAVED_STATE_KEY)
        ?.getString(SOME_VALUE_KEY)
        ?: ""
    }
}
#+END_SRC
- 如您所见，SavedStateRegistry 强制您将密钥用于数据。这样可以防止您的数据被 attach 到同一个 Activity/Fragment的另一个 SavedStateProvider 破坏。就像在 OnBackPressedDispatcher 中一样，您可以例如将 SavedStateProvider 提取到另一个类，通过使用所需的任何逻辑使其与数据一起使用，从而在应用程序中实现清晰的保存状态行为。
- 此外，如果您在应用程序中使用 ViewModel，请考虑使用 AndroidX  ViewModel-SavedState 使你的ViewModel 可以保存其状态。为了方便起见，从 AndroidX  Activity 1.1.0 和 AndroidX Fragment 1.2.0 开始，启用 SavedState 的SavedStateViewModelFactory 是在获取 ViewModel 的所有方式中使用的默认工厂：委托 ViewModelProvider 构造函数和 ViewModelProviders.of() 方法。
*** FragmentFactory
- Fragment 最常提及的问题之一是不能使用带有参数的构造函数。例如，如果您使用 Dagger2 进行依赖项注入，则无法使用 Inject 注解 Fragment 构造函数并指定参数。现在，您可以通过指定 FragmentFactory 类来减少 Fragment 创建过程中的类似问题。通过在 FragmentManager 中注册 FragmentFactory，可以重写实例化 Fragment 的默认方法：
#+BEGIN_SRC kotlin
class MyFragmentFactory : FragmentFactory() {
  override fun instantiate(classLoader: ClassLoader, className: String): Fragment {
    // Call loadFragmentClass() to obtain the Class object
    val fragmentClass = loadFragmentClass(classLoader, className)
 
 
    // Now you can use className/fragmentClass to determine your prefered way
    // of instantiating the Fragment object and just do it here.
 
 
    // Or just call regular FragmentFactory to instantiate the Fragment using
    // no arguments constructor
    return super.instantiate(classLoader, className)
  }
}
#+END_SRC
- 如您所见，该API非常通用，因此您可以执行想要创建 Fragment 实例的所有操作。回到 Dagger2 示例，例如，您可以注入FragmentFactory Provider <Fragment> 并使用它来获取 Fragment 对象。
*** 测试 Fragment
- 从AndroidX  Fragment 1.1.0 开始，可以使用 Fragment 测试组件提供 FragmentScenario 类，该类可以帮助在测试中实例化 Fragment 并进行单独测试：
#+BEGIN_SRC kotlin
// To launch a Fragment with a user interface:
val scenario = launchFragmentInContainer<FirstFragment>()
 
// To launch a headless Fragment:
val scenario = launchFragment<FirstFragment>()
 
// To move the fragment to specific lifecycle state:
scenario.moveToState(CREATED)
 
// Now you can e.g. perform actions using Espresso:
onView(withId(R.id.refresh)).perform(click())
 
// To obtain a Fragment instance:
scenario.onFragment { fragment ->
}
#+END_SRC
*** More Kotlin!
- 很高兴看到 -ktx AndroidX 软件包中提供了许多有用的 Kotlin 扩展方法，并且定期添加了新的方法。例如，在AndroidX Fragment-KTX 1.2.0 中，使用片段化类型的扩展名可用于 FragmentTransaction 上的 replace() 方法。将其与 commit() 扩展方法结合使用，我们可以获得以下代码：
#+BEGIN_SRC kotlin
// Before
supportFragmentManager
  .beginTransaction()
  .add(R.id.container, MyFragment::class.java, null)
  .commit()
 
 
// After
supportFragmentManager.commit {
  replace<MyFragment>(R.id.container)
}
#+END_SRC
*** FragmentContainerView
- 一件小而重要的事情。如果您将 FrameLayout 用作 Fragment 的容器，则应改用 FragmentContainerView 。它修复了一些动画 z轴索引顺序问题和窗口插入调度。从 AndroidX Fragment 1.2.0 开始可以使用 FragmentContainerView。

* Fragment的生命周期函数详解
** 几个常用生命周期函数的简介
- onAttach()：Fragment和Activity相关联时调用。可以通过该方法获取Activity引用，还可以通过getArguments()获取参数。
- onCreate()：Fragment被创建时调用。
- onCreateView()：创建Fragment的布局。
- onActivityCreated()：当Activity完成onCreate()时调用。
- onStart()：当Fragment可见时调用。
- onResume()：当Fragment可见且可交互时调用。
- onPause()：当Fragment不可交互但可见时调用。
- onStop()：当Fragment不可见时调用。
- onDestroyView()：当Fragment的UI从视图结构中移除时调用。
- onDestroy()：销毁Fragment时调用。
- onDetach()：当Fragment和Activity解除关联时调用。
** Fragment生命周期解析
*** 当一个fragment被创建的时候：
- onAttach()
- onCreate()
- onCreateView() //
- onActivityCreated()
*** 当这个fragment对用户可见的时候，它会经历以下状态。
- onStart()
- onResume()
*** 当这个fragment进入“后台模式”的时候，它会经历以下状态。
onPause()
onStop()
*** 当这个fragment被销毁了（或者持有它的activity被销毁了）：
- onPause()
- onStop()
- onDestroyView() //
- onDestroy()
- onDetach()
*** 就像Activity一样，在以下的状态中，可以使用Bundle对象保存一个fragment的对象。
- onCreate()
- onCreateView() // 
- onActivityCreated()
** 其他场景的调用
*** 屏幕灭掉
- onPause() 
- onSaveInstanceState() // 这里可以保存
- onStop()
*** 屏幕解锁
- onStart() 
- onResume()
*** 切换到其他Fragment
- onPause() 
- onStop() 
- onDestroyView() // 
*** 切换回本身的Fragment
- onCreateView() // 
- onActivityCreated() 
- onStart() 
- onResume()
*** 回到桌面: 这里写得好像是不对
- onPause() 
- onSaveInstanceState() // 
- onStop()
*** 回到应用
- onStart() 
- onResume()
*** 退出应用
- onPause() 
- onStop()
- onDestroyView() //
- onDestroy() 
- onDetach()