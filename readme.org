#+latex_class: cn-article
#+title: Android Study Plan
#+author: deepwaterooo

* Weekly updates
** 安卓方面的知识点总结、面试准备
- 基础的知识点，关于理论的部分，基本都没什么问题，只是查漏检缺，把之前不曾涉及的知识点补充并打下基础
- 项目的部分，从github上可以拖非常多的案例下来供自己参考学习，巩固知识点。
- build and run别人构建好的项目大部分时间是没有问题的，或是能够fix构建中产生的问题，但个别时候，因为包依赖等问题，构建过程中还是会存在一些问题，需要自己对groovy gradle构建过程与原理掌握得更透彻一些
- 大的方向上：感受这半年来自己专业上的成长与进步，从不曾悲观气馁，现在自己的触角已经全面伸入（多线程——全面巩固打基础阶段、）多进程、recyclerview，androidx material design, 以及熟悉的kotlin语言（就像当初学生时两三年用c++写作业和项目，但Andorid app programming一门课便把自己转入了java, 转kotlin语言对我来说应该也是迟早随时都可能会发生的事情，有期待不意外）内存泄露、布局优化、app 多进程使用优化等优化的方方面面，自己能够感受到全面进步，很开心
- 可以确定的是：现在的理解、分析解决问题的能力已经比以前、往年，或者说2017/2018年作为安卓开发工程师的要强了很多，很多的原理都能自己搜索明白，但做安卓开发的知识面广度和深度都希望还能再扩大和加深，并配合项目、代码来加强理解。
- 现在除了从理论基础的构建、以及安卓项目的不断练习上提高自己(在理论基础的不断构建与项目上的一再巩固练习掌握下)，接下来也会学习安卓相关的各种分析优化工具的使用（以及关于优化的原理、分析也就顺其自然），这个过程中也会多学习一些广泛使用的类库（jetpack 和第三方的）
- 感觉安卓开发，自己也有基础，也有理解、分析和解决问题的能力，但还没能寻找到一个系统化、或者说循序渐进的学习方法，这个周的业余时间也会再多搜索一下，需要着力的版块，希望能够列个题纲出来，在网上搜一搜，争取把零碎，工作中、项目中可能用到的知识点都总结掌握好了
*** android studio与学习工具
- 随着android studio的功能越来越强大，自从装了最新版本后，我最好的笔记本电脑已经不够用，运行ide期间会明显卡顿，cpu不够用，时常100%，键盘卡顿，是到了必须得为自己的学习配制必要的工具的时候了。这两天装了三个plugins, emacsIDEs keybinds, butterknife view binding, zelezny plugins自动生成butterknife view id bindings之后，今天再试一下momoery profier，这个破电脑已经实在无法正常运转android studio了，新配的电脑一个周之后才到。。。。。。
- 小的细节感觉只要遇到的时候，搜索一下就可以搞定，所以以后我会尽量着手解决自己感觉陌生的大的版块和知识面，小的点会在具体项目开发或build/run应用需要的时候一一再去捡回来
- 目前比较感兴趣的版块包换： *android SDK, android module builds, NDK/jni, openGL es的原理与应用, content provider及其相关的多线程多进程知识面* 希望一一捡回来（借助今天的一个相机小项目，以后就不会再对相机的原生开发感觉陌生了！！！）
- 希望这个周作息再稍作调整，并把自己算法题再做一做，等新电脑到了，也该全力投入安卓学习了
- leetcode算法练习： 希望这个周下午和傍晚时间能够回过头去把自己认为还有必要提升的部分、相关难题部分做完，接下来也都会参加自1月8日开始起的每个周六的周赛，半月赛练习
- 必要的时候还是会再零星准备一些相关内容的小知识点知识面总结

** configure new desktop environment
- todo: 主要剩下的问题还包括：
  - texworks的中文配置，以及mint包,现在配置好，但是还存在一些小问题，需要解决（我记得自己经前配置字体latex从来都是最头痛的事，不知道从什么时候起，latex的运行环境、语言配置已经制作得像使用傻瓜相机一样，是个人都能很快上手，很是方便！）
  - emacs中字体出不来像板砖的问题，其实只要换一下字体就解决了，现在的中英文字体都很好看，只有一个小问题：还没有办法设置默认字体Incolada-dz for powerline（个人更喜欢Incolada-dz但它在我显示器上有些不清晰，只好设置背景深色，并换一个细一些儿的字体）,必须每次手动设置，以后会尝试解决；
  - window 10 window termiman好需要好好配置利用一下，会方便不少
    
[[./pic/ttmp.png]]

- disk partitions are well done now. HDD partitions can be done later when needed. 
- win 10 java 11 and ubuntu java 11 no problem, android studio default to java 11 too. 
- main configuration to be done include: 
  - win 10 wsl 2 or 1, potentially 2 for an entire kernal. wsl 1 configured yesterday, and java development environment, emacs, and zsh, that was the third time during my life installing wsl 1, 1st time know nothing, 2nd time relocated the system in a different locaiton. Yesterdasy into a separate SSD disk, and username matches windows', but did not expect this morning powershell was NOT able to find ubuntu wsl system......So today i will have to start over for wsl again......
  - yesterday new win system left windows key and left alt key switch registration wasted some time, due to having not realized restarting system needed, which also resulted in the above wsl1 path cannot be found this morning. 
  - ubuntu emacs, java enviroment, zsh powerline10k theme to be done, and potentially and linux ubuntu wsl 2 with android studio installed in ubuntu as well
- win 10 texlive emacs org mode configuration to be done
- will return back to android study once the environments gets readsy later this evening or tomorrow.
- expect this desktop environment to be best ever, cause whenever I am configuring some new environmen or reinstall wsl, I can realize which parts I could do better on. 

** 调整作息
- 经过的过去几个月（9月到12月几个整月）的6:00am-11pm作息后，我觉得自己白天的头脑思维和精力还是不够好（常常还是会脑袋有点儿昏），应该是到了需要再切换一下，晚上12:30-1am左右休息入睡，早上6am起床，中午12:00-1:30左右午休90分钟的作息
- 新的作息下，早上的精力会相对差一些，晚上入睡4.5个小时左右（总共5个小时），平均三个睡眠周期之后，上午的脑袋相对会比较昏；但如果中午能够入睡，下午和晚上的头脑会比较清醒，学习的效率也会提升不少。所以新的作息下，希望晚上少睡以确保中午能够入睡，哪怕只能真正睡着5分钟，上午精力不够好的前提下，需要再搜索计划一下上午应该做哪些方面的事情（现在还没有想好上午适合做什么，写调试项目，真正试图去fix一些bug?或者做一些基础文档、学习笔记的整理）；如果中午能够入睡，便希望下午和晚上的时间能够科学高效地利用起来，做leetcode难题，或是去理解平时、正常状态下理解不了或读不下去的原理
- 感觉自己调整作息的这段时间状态并不是很好，接下来应该还是会晚上稍微早点儿休息（11点之前休息，6点起床），中午休息半个小时（能睡着很好，睡不着不勉强）


* 零碎知识点题纲
- https://medium.com/mindorks/android-development-learning-path-2020-edition-3f464ac56dbf
** Programming
- Java
- Kotlin: 现在基本没有读代码障碍，零星知识点需要用到时再拾取
** Android Studio
- Android Studio IDE Overview
- Project Structure — Java/Kotlin, XML, .gradle files
** Android Component
- Activity — Activity Lifecycle, Tasks & Back Stack
- Service
- Broadcast Receiver
- Content Provider: IPC - ContentProvider, AIDL, Messenger, Intent, Binder, Socket
** Intents
- Types of Intent - Implicit, Explicit
- Intent Filter
** Static User Interface
- View — Button, ImageView, TextView, EditText, and etc
- ViewGroup - LinearLayout, RelativeLayout, FrameLayout, ConstraintLayout
  - ViewGroup - LinearLayout, RelativeLayout, FrameLayout:三大传统布局，适用于不同的场合
  - ConstraintLayout : Google 新推的布局，目前已经取代 RelativeLayout 成为默认的 App 布局
** Dynamic User Interface
- RecyclerView: 理论清楚，需要项目锻炼
- ViewPager： 拼凑项目、bug纠错了简易版的ViewPager轮播指示器（不带粘附性）
- Spinner： 有点儿像ListView，但功能简单，可以自定义（拼凑小顶目，可能还需要深入一下） androidx material design every conponent全面掌握
** CustomView: Android 默认的布局很多时候都没法满足设计的需求，这时候就需要自定义 View，你需要掌握下面几个知识点的使用
- Canvas
- Bitmap
- Paint
** UI Resources
- Drawables
- String
- Styles
** Fragments
- Fragment Lifecycle
- Fragment Manager
** Support User Interface: 需要知道这是什么东西，基本的用法
- ProgressBar
- Dialogs
- Toast & Snackbar
** Storage: 不免要和文件打交道，文件的读写、存储都是必不可少的
- Shared Preferences: 适合存储字段
- File Systems: 文件存储
- Database — RoomDB: 数据库存储，RoomDB 是 Google 新推出的数据库解决方案
** Build
- Android App 默认使用 Gradle 进行编译，关于 Gradle 的使用必须要熟悉，以及如何区分开发版本和 Release 版本，以及国内特有的多渠道打包技术、以及 ASM 等
- Gradle
- Debug / Release Configuration
- 多渠道打包
- ASM
** Threading
- Android App 只有一个主线程，其余的我们称之为工作线程，我们的很多工作需要再工作线程和主线程直接切换，如何高效创建和释放线程、线程池、线程间通信、Message-Looper-Handler 模型这些知识点都要了熟于心，另外进阶的话 Binder 通信也是需要掌握的知识
- Threads
- Handler / Looper / Message / MessageQueue
- AIDL / Binder: ? 这个，更多的是进程间通讯，和安卓底层架构实现机理了吧？（不过也需要掌握）
** Debugging
- Memory profiling - MAT，AS Memory Profile
- Logging - Log 包含非常丰富的信息，可以帮助我们还原现场
- Systrace - Systrace 工具可以查看一段时间内手机系统各个进程的运行状态，具体使用可以参考我博客的 Systrace 系列教程
- Exceptions - 各种异常，保证程序的健壮性
- Error Handling - Error 是必须要解决的问题，一般会导致 App 直接闪退，需要非常重视
** Memory Leak
- 内存泄漏是一个很大的专题，包括 Java 内容泄漏和 Native 内存泄漏，涉及的知识点非常多，可以单独拿出来做一个大的知识栈。一般来说， Java 内存泄漏会比较好检测和修复，但是 Native 内存泄漏就会比较难。
  - Detecting and Fixing Memory Leaks - 内存泄漏检测和修复，是一个比较大的工程，可以参考 LeakCanary、Matrix 等开源工具
  - Context - 使用不当会造成该释放的对象没有释放造成内存泄漏
  - Native Memory Leaks: 与上面的有什么区别呢？
** 3rd Party Library
- Image Loading - Glide, Picasso
- Dependency Injection - Dagger
- Networking - Fast Android Networking Library, Retrofit
- MultiThreading - RxJava, Coroutines
** Data Format
- JSON — GSON
- Flat Buffer
- Protocol Buffer
** Android Jetpack
- Jetpack 包含与平台 API 解除捆绑的 androidx.* 软件包库。这意味着，它可以提供向后兼容性，且比 Android 平台的更新频率更高，以此确保您始终可以获取最新且最好的 Jetpack 组件版本。
- Foundation Components — AppCompat, Android KTX, Multidex
- Architecture Components — LiveData, ViewModel, DataBinding, Paging, Navigation， Work Manager（这最后一个没怎么看，暂时的项目中用到的较少）
- Behaviour Components - Download Manager, Media Playback, Notification, Permissions, Preference, Sharing, Slice
- UI Component - Animation & Transition, Android Auto, Emoji, Palette, Android TV, Android Wear（缺失）
** Architecture
- MVVM - MVVM 是 Model-View-ViewModel的简写。它本质上就是 MVC 的改进版。MVVM 就是将其中的 View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开
- MVI ？
- MVP - MVP 从更早的 MVC 框架演变过来，与 MVC 有一定的相似性：Controller/Presenter 负责逻辑的处理，Model 提供数据，View 负责显示
** Unit Testing
- Local Unit Testing
- Instrumentation Testing
** Firebase：只是接触过，要加强
- FCM
- Crashlytics
- Analytics
- Remote Config
- App Indexing
- Dynamic Link
** Security：只是接触过，要加强
- Encrypt / Decrypt
- Proguard
- R8
** App Release
- .keystore file
- App Bundle
- Playstore
- 多渠道打包
- 插件化

* 超详细的-Android超神学习路线总结
** 第一阶段，基础入门（java部分）
- 1、计算机基础知识计算机基础、DOs常用命令java概述、j环境安装配置、环境变量配置、Java程序入门（掌握）
- 2、编程基础常量与变量、数据类型、运算符、流程控制语句、方法、数组（掌握）
- 3、面向对象（重点）类与对象、封装、继承、多态、抽象类、接口
- 4、常用类（重点）常用类介绍、正则表达式
- 5、集合（重点）Collection集合、List集合、set集合、Map集合
- 6、异常（掌握）异常处理方式、自定义异常
- 7、IO（重点）File类、递归、字节流、字符流、转换流、缓冲流
- 8、多线程（掌握）多线程、线程池
- 9、网络编程（掌握）网络编程
- 10、反射（掌握）
- 学习Android开发，首先要学习java基础知识，尤其是校招的时候非常注重基础，即使没有项目也没关系，基础一定要打好，一般笔试以及面试的第一轮，对基础的考察是比较多的。
- 如果是小白入门，看视频是最有助于理解的，而且是学习最快的，后面再查缺补漏的时候，就看看书就好了，或者回头翻一下笔记。如果已经学过java基础的知识，也可以直接翻一遍书，复习复习即可。看视频的时候不能只听不练，建议用IDEA工具，更普遍一些。
- 【初级Android开发教程】
- 【Android高级工程师大厂面试必问】Java虚拟机原理大揭秘 上
- 【Android高级工程师大厂面试必问】Java虚拟机原理大揭秘 下
** 第二阶段
- 1、 xmljson门解析+Android入门+常见布局（掌握）几种数据格式的掌握、json的解析方法、 Android系统框架理解、常见几种布局、DM各个功能、单元测试
- 2、文件存储界面展现+MySQL+DBC（重点） LogcatAndroid的使用方法、中的文件权限的作用 SharedPreference的使用介绍、s卡使用介绍、 MySql数据库使用介绍、JDBC操作数据库
- 3、数据存储+界面展现 3.+html+tomcat +http+ Servlet （Request. Response）+协议介绍+servlet（requestesponse）+文件上传+Androld应用开发网络编程（重点）sqlite数据的使用、 ListView控件的使用、ml标签的使用的生命周期、ANR异常、 Handler消息机制原理
- 4、页面跳转和数据传递+广播和服务+内容提供者（重点） Intent意图介绍、 AndroidManifest xml文件掌握、四大组件的使用方法、用户私有数据的访问
- 5、多媒体编程+新特性和知识点回顺+代码版本管理和实战（掌握）图形图像的处理、 SurfaceView使用、 VideoView使用、 Vitamio万能播放器的使用、 Fragment的使用、动画的定义
【对标阿里P7-年薪百万，最牛第三方库系列学习视频】热修复设计，插件化框架设计，组件化框架设计，图片加载框架等
** 第三阶段
- 1、C语言基（main函数、 include头文件、em命，C的基本数类， pintle. sanf与白位符，数组与指针、内存分配、结构体、联合体与举， typedef
- 2、与底层调用（器）m概念、交又编译、ndk、开发流程a向传数C代码中向a出日志、C回调jva方法等
- 3、基磁合项目（进程管理手机存空间管理，名单设置和关系话与短信管理控件的优化技巧等（原点）w工具、获取服务端应用版本号、Dag控件更新版本k，代码时执行Co的区别、30旋转效、状态选择器自定义组合控件、 Sharedpreferences读写数据、G5定位，手势识别器定M，获取联系人、超级管理员功能、黑名单、分页加、电话与短信，P 即，打开、详情、分享软件等
- 4、复自定义控件（探）自定义ew、自定义口标题、自定义 Notification、自定义 Dialog、各种图形的使介 Listview数据异步加 Asynctask Listview数据的分批加数、拖拉与多点触等
- 【高级UI】对标阿里P7Android高级架构师系统教程-自定义ViewGroup（上）
- 【高级UI】对标阿里P7 Android高级架构师系统学习教程-自定义ViewGroup （中）
- 【高级UI】对标阿里P7 Android高级工程师系统学习教程-自定义ViewGroup （下）
** 第四阶段
- 1、互联网新闻项目客户端（掌握）
  - 综合使用了、例拉单、极光推送、社会分享、下拉断、二码生成等开源项目，屏幕适配新阳详使用，hml机板和 javascript的动态交互项目的需求分析、构建项目业务模型、程序设计文等详， Splash界面动效果、ewer实现引导页界面、 Sidingmenu控件、 Fragment换界面 Viewpagereradioggroup、基类的抽取、 Vlewpager禁止滑动、 Slldingmenu例边、 Httputils 7获络数Gom解析ON、 sharepreference本地数据存、 Viewpagerindicator使用、 Vlewpager Indicator滑动神突、事件分发机制、 centercrop.性、 Shares完成分享功能、内存缓存和硬盒缓存、缓存机制、第三方接入
- 2、电子应用市场项目（掌握）
  - 项目体架设计观察者式工厂模式模版式三级存，对内存进行优化谷推出的兼容包自定义控件ew原理、测量、布局、绘制触事件详，自定义 Application、 Commonutils工具类、封装日志管理工具类、 Actionbar、 Pagersliding Tab+viewpager、 Httphelper获取数据、 Pulltorefresh、 mageloader Stellar Map、随机色、动态添加 Textview选择器、 Valueanimator、 Photoview、 Executors封线程池
- 3、开发工具 Android Studio（重点）
  - 安装 Android Studio工、置 Android Studio的 Android SDK路径、 gradle、 Android Studio常用菜单、修改常用设置、导入 eclipse项目、 Android Studio依赖库文件添加
- 4、 Android5+60新性（掌）
  - Materal主题样式、 Android5，0中 Elevation、 translation属性、ew中 outlineprovider性、独立应用vew的功能、 Palette类实现取色， Recyderview控件、 Cardic开发出卡片效果、 Swiperefreshlayout刷新控件、 Toolbar控件、50新特性版本兼容4.0及以上版本、OTP网络框架等
- 5、开源架合集（提）
  - lon库、 Retrofit、vol库、图片加库、 Pulltorefresh， Pinnedsectionlist、Customshapelmage
- 【开源架构原理分析与手写实战】为什么要进行组件化？（1））

* 按title 级别分
** Android初级工程师
- 四大组件的使用(Activity、Service、Broadcast、ContentProvider)
- 五大布局的使用(LinearLayout、RelativeLayout、FrameLayout、TableLayout、AbsoluteLayout)
- 自定义View
- 动画的使用
** Android中级工程师
- 熟悉AIDL，理解其工作原理，懂transact和onTransact的区别
- 从Java层大概理解Binder的工作原理，懂Parcel对象的使用
- 多进程的运行机制，懂Messenger、Socket等
- 弹性滑动、滑动冲突等
- View的绘制原理、各种自定义View
- View动画和属性动画的不同点，懂属性动画的工作原理
- 性能优化、mat等工具
- 常见的设计模式
** Android高级工程师
- 稍微深入的知识点
- 系统核心机制
- 基本知识点的细节
- 设计模式和架构

* 系统服务篇
DONE: Android 如何启动？
[x] DONE: Android 应用进程启动流程
[ ] 什么是系统服务？
[ ] ActivityManagerService
[ ] SystemServer
[x] DONE: Android 应用安装过程源码解析
[ ] WindowManagerService
[ ] Zoyote 前世今生

* 通信框架篇
[x] Binder 完全解析
[x] DONE: Binder 完全解析（一）概述
[x] DONE: Binder 完全解析（二）设计详解
[x] DONE: Binder 完全解析（三）AIDL实现原理分析
[x] Handler 通信框架
[x] DONE: Handler消息机制源码解析

* 应用组件篇
[ ] Application 是什么？
DONE: Context 分析
[ ] Activity 组件分析
[x] DONE: Activity生命周期是如何实现的
[ ] Services 组件分析
[ ] ContentProvider 组件分析
[ ] Broadcast 组件分析

* 珠玑拾遗
[ ] Gradle 用法
[ ] 混淆一二事

Andriod系统开发

* Android操作系统概述
Android平台介绍；Android平台特性；Android平台架构；Android Navtive C/C++程序开发；Android NDK；Native开发方式与JAVA开发方式比较。
* Android开发环境搭建
Android SDK介绍；Eclipse ADT插件；Android模拟器开发。
* Android项目结构分析
资源管理(Resources)分析；drawable分析；layout分析；Activity分析；Intent分析；Service分析；Content分析。
* Android UI设计
标准控件的使用；设计开发自定义控件；Layout布局的使用；触摸/按键（UI Events）事件处理方法；View，SurfaceView，Canvas,Paint类分析使用；显示文本以及显示特殊效果文本；绘图及显示图片；实现动画效果。
* Intent Receive
Intent的作用和目的；属性讲解；Android定义解析Intent；AndroidManifest.xml深入分析。
* Service
什么是Service，如何使用Service，Service的生命周期，BroadcastReceiver的使用。
* Content Provider
SQLite介绍，创建Content Providers，使用Content Providers，使用URI语法进行增删改查。
* Android高级应用开发
访问本地通讯录；网络连接的相关知识；流媒体的处理；URLConnection和HttpURLConnection的应用；
HttpClient的分析；本地文件浏览管理；音视频播放处理；Widget应用开发。
* Android程序发布部署建
Android 调试桥；启用logcat日志调试；模拟器上安装删除软件；打包* 签名和安装软件到设备。
* Android 底层架构分析
移植Android到新的硬件平台；需要支持Linux 操作系统的硬件平台架构分析；支持Android的Linux内核特性分析；为Linux内核增加Android特性；移植Android Debug Bridge调试接口；编写／移植Android内核驱动；硬件支持double frame buffer/page flipping；bionic库移植与优化；Dalvik Vm移植；第三方应用程序移植；建立Android移植开发平台；新的嵌入式处理器引入的Android相关问题；获得高效的Android工具链。
* Android移植
支持ARM11的Linux-2.6.28内核新特性简介；移植LCD double buffer驱动；移植触摸屏驱动；移植Android键盘驱动；移植Wifi驱动支持Android上网功能；移植电源管理驱动，支持Android电池管理；部署Android系统到实际ARM11平台。
* 阶段项目实战与测试
通过对ITelephony接口和ISms接口以及AIDL在Android程序中的开发应用，开发一个打电话和发短信的程序。



